import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { z } from "https://deno.land/x/zod@v3.22.4/mod.ts";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

// Input validation schema - Aumentado el l√≠mite de mensajes
const requestSchema = z.object({
  messages: z.array(z.object({
    role: z.string(),
    content: z.string().max(2000)
  })).min(1).max(50), // Aumentado de 20 a 50 para conversaciones m√°s largas
  userLocation: z.object({
    latitude: z.number().min(-90).max(90),
    longitude: z.number().min(-180).max(180),
    name: z.string().max(200).optional()
  }).nullish(),
  mode: z.enum(['normal', 'thinking']).optional(),
  radius: z.number().min(100).max(50000).optional()
});

interface Message {
  role: string;
  content: string;
}

interface ThinkingStep {
  step: string;
  message: string;
}

interface Provider {
  id: string;
  name: string;
  category: string;
  description: string;
  rating: number;
  location_name: string;
  latitude: number;
  longitude: number;
  contact_phone: string | null;
  contact_email: string | null;
  website: string | null;
  address: string;
  score: number;
  distance: number;
  cve_scian?: string;
  estrato?: string;
}

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    // Parse raw body first
    const rawBody = await req.json();
    
    console.log('=== AN√ÅLISIS INICIAL ===');
    console.log('Body recibido:', JSON.stringify(rawBody, null, 2));
    
    // PRIMERO: Verificar si es pregunta informativa (ANTES de validaci√≥n completa)
    if (rawBody.messages && Array.isArray(rawBody.messages) && rawBody.messages.length > 0) {
      const lastMessage = rawBody.messages[rawBody.messages.length - 1]?.content || '';
      console.log('√öltimo mensaje:', lastMessage);
      
      const isInfoQuestion = isLocationInfoQuestion(lastMessage);
      console.log('¬øEs pregunta informativa?', isInfoQuestion);
      
      if (isInfoQuestion) {
        console.log('‚úÖ Detectado como pregunta informativa - usando Gemini');
        const GEMINI_API_KEY = Deno.env.get('GEMINI_API_KEY');
        if (!GEMINI_API_KEY) {
          throw new Error('GEMINI_API_KEY no configurada');
        }
        
        const aiResponse = await callGemini(lastMessage, GEMINI_API_KEY, 'info');
        return new Response(JSON.stringify({
          type: 'info',
          message: aiResponse
        }), {
          headers: { ...corsHeaders, 'Content-Type': 'application/json' }
        });
      }
    }
    
    console.log('‚ùå NO es pregunta informativa - procediendo con validaci√≥n completa');
    
    // SEGUNDO: Validar schema completo solo si NO es pregunta informativa
    const validationResult = requestSchema.safeParse(rawBody);
    
    if (!validationResult.success) {
      console.error('Validation error:', validationResult.error);
      return new Response(JSON.stringify({
        type: 'error',
        message: 'Datos de entrada inv√°lidos. Por favor verifica tu solicitud.'
      }), {
        status: 400,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      });
    }
    
    const { messages, userLocation, mode = 'normal', radius } = validationResult.data;
    
    const DENUE_API_KEY = Deno.env.get('DENUE_API_KEY');
    const GEOAPIFY_API_KEY = Deno.env.get('GEOAPIFY_API_KEY');
    const GEMINI_API_KEY = Deno.env.get('GEMINI_API_KEY');

    if (!DENUE_API_KEY || !GEOAPIFY_API_KEY || !GEMINI_API_KEY) {
      throw new Error('API keys no configuradas');
    }

    // Analizar la √∫ltima consulta del usuario
    const lastUserMessage = messages[messages.length - 1]?.content || '';
    const thinkingSteps: ThinkingStep[] = [];
    
    console.log('=== PROCESANDO B√öSQUEDA ===');
    console.log('Mensaje a procesar:', lastUserMessage);

    // Paso 1: Detectar intenci√≥n
    thinkingSteps.push({
      step: 'analyzing',
      message: 'ü§î Analizando tu solicitud...'
    });

    const searchTerms = extractSearchTerms(lastUserMessage);
    console.log('T√©rminos de b√∫squeda extra√≠dos:', searchTerms);
    
    // Intentar extraer ubicaci√≥n del mensaje
    let location = userLocation;
    let locationText: string | null = null;
    
    if (!location) {
      locationText = extractLocation(lastUserMessage);
    }
    
    const needsLocation = !location && !locationText;
    const needsRadius = !radius && !containsRadius(lastUserMessage);

    // Si falta informaci√≥n, hacer preguntas aclaratorias con Gemini
    if (needsLocation) {
      const aiQuestion = await callGemini(lastUserMessage, GEMINI_API_KEY, 'ask_location');
      return new Response(JSON.stringify({
        type: 'question',
        message: aiQuestion,
        needsLocation: true
      }), {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      });
    }

    if (needsRadius) {
      const aiQuestion = await callGemini(lastUserMessage, GEMINI_API_KEY, 'ask_radius');
      return new Response(JSON.stringify({
        type: 'question',
        message: aiQuestion,
        needsRadius: true,
        options: [
          { label: '2 km', value: 2000 },
          { label: '5 km', value: 5000 }
        ]
      }), {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      });
    }

    // Paso 2: Geocodificar ubicaci√≥n
    thinkingSteps.push({
      step: 'geocoding',
      message: 'üó∫Ô∏è Obteniendo coordenadas de la ubicaci√≥n...'
    });

    if (!location && locationText) {
      location = await geocode(locationText, GEOAPIFY_API_KEY);
    }
    
    // Validaci√≥n final de ubicaci√≥n
    if (!location) {
      return new Response(JSON.stringify({
        type: 'error',
        message: 'No se pudo determinar la ubicaci√≥n. Por favor especifica una ciudad.'
      }), {
        status: 400,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      });
    }

    // Paso 3: Buscar en DENUE
    thinkingSteps.push({
      step: 'searching',
      message: `üîç Buscando ${searchTerms.display} en un radio de ${(radius || 2000) / 1000} km...`
    });

    let providers = await searchDENUE(
      searchTerms.terms,
      location.latitude,
      location.longitude,
      radius || 2000,
      DENUE_API_KEY
    );

    // Paso 4: Enriquecer con Geoapify (solo en modo thinking)
    if (mode === 'thinking' && providers.length > 0) {
      thinkingSteps.push({
        step: 'enriching',
        message: '‚ú® Enriqueciendo datos con informaci√≥n adicional...'
      });

      providers = await enrichProviders(providers, GEOAPIFY_API_KEY, searchTerms.geoCategories);
    }

    // Paso 5: Calcular scores
    thinkingSteps.push({
      step: 'scoring',
      message: 'üìä Calculando puntuaciones de relevancia...'
    });

    providers = providers.map(p => ({
      ...p,
      score: calculateScore(p, location, searchTerms.terms, mode === 'thinking'),
      distance: calculateDistance(location.latitude, location.longitude, p.latitude, p.longitude)
    }));

    // Ordenar por score
    providers.sort((a, b) => b.score - a.score);

    // Limitar resultados si el usuario especifica un n√∫mero
    const requestedLimit = extractLimit(lastUserMessage);
    const resultsToShow = requestedLimit || Math.min(providers.length, 50);
    
    // Preparar respuesta personalizada con Gemini
    let responseMessage;
    if (providers.length > 0) {
      const context = `Encontr√© ${providers.length} ${searchTerms.display} cerca de ${location.name}. ${requestedLimit ? `El usuario pidi√≥ los ${requestedLimit} mejores.` : ''} Radio de b√∫squeda: ${(radius || 2000) / 1000} km.`;
      responseMessage = await callGemini(lastUserMessage, GEMINI_API_KEY, 'results', context);
    } else {
      const context = `No se encontraron ${searchTerms.display} en ${location.name} con radio de ${(radius || 2000) / 1000} km.`;
      responseMessage = await callGemini(lastUserMessage, GEMINI_API_KEY, 'no_results', context);
    }

    return new Response(JSON.stringify({
      type: 'results',
      message: responseMessage,
      thinking: thinkingSteps,
      providers: providers.slice(0, resultsToShow),
      location,
      mode
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' }
    });

  } catch (error) {
    // Log detailed error server-side for debugging
    console.error('Error en search-providers:', {
      error,
      message: error instanceof Error ? error.message : 'Unknown error',
      stack: error instanceof Error ? error.stack : undefined,
      timestamp: new Date().toISOString()
    });
    
    // Mensaje de error personalizado con Gemini
    try {
      const GEMINI_API_KEY = Deno.env.get('GEMINI_API_KEY');
      if (GEMINI_API_KEY) {
        const errorMsg = error instanceof Error ? error.message : 'Error desconocido';
        const aiError = await callGemini('', GEMINI_API_KEY, 'error', errorMsg);
        return new Response(JSON.stringify({
          type: 'error',
          message: aiError
        }), {
          status: 500,
          headers: { ...corsHeaders, 'Content-Type': 'application/json' }
        });
      }
    } catch (geminiError) {
      console.error('Error llamando a Gemini para mensaje de error:', geminiError);
    }
    
    // Return safe generic message to client (no internal details)
    return new Response(JSON.stringify({
      type: 'error',
      message: 'Ocurri√≥ un error al buscar proveedores. Por favor intenta de nuevo.'
    }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' }
    });
  }
});

// Funci√≥n para llamar a Gemini API
async function callGemini(
  userMessage: string,
  apiKey: string,
  type: 'info' | 'ask_location' | 'ask_radius' | 'results' | 'no_results' | 'error',
  context?: string
): Promise<string> {
  let systemPrompt = '';
  let prompt = '';

  switch (type) {
    case 'info':
      systemPrompt = 'Eres un asistente amigable y profesional de ProveIA, un sistema que ayuda a encontrar proveedores en M√©xico. Responde de manera concisa y amable sobre la cobertura del servicio.';
      prompt = `El usuario pregunta: "${userMessage}"\n\nExplica que ProveIA tiene cobertura en todo M√©xico, menciona algunas ciudades principales de manera natural y pregunta en qu√© ciudad espec√≠fica necesita buscar. Usa emojis relevantes pero con moderaci√≥n. M√°ximo 150 palabras.`;
      break;
    
    case 'ask_location':
      systemPrompt = 'Eres un asistente conversacional de ProveIA. Haz preguntas naturales y amigables.';
      prompt = `El usuario busca: "${userMessage}"\n\nNecesitas preguntarle en qu√© ubicaci√≥n quiere buscar. S√© breve y natural. M√°ximo 30 palabras.`;
      break;
    
    case 'ask_radius':
      systemPrompt = 'Eres un asistente conversacional de ProveIA. Haz preguntas naturales y amigables.';
      prompt = `El usuario busca: "${userMessage}"\n\nNecesitas preguntarle a qu√© distancia quiere buscar. S√© breve y natural. M√°ximo 30 palabras.`;
      break;
    
    case 'results':
      systemPrompt = 'Eres un asistente de ProveIA que presenta resultados de b√∫squeda de manera profesional y amigable.';
      prompt = `Contexto: ${context}\n\nPresent√© los resultados de b√∫squeda. Genera un mensaje breve (m√°ximo 50 palabras) que:\n- Confirme qu√© se encontr√≥\n- Mencione que est√°n ordenados por relevancia\n- Sea profesional pero amigable\n- Use 1-2 emojis relevantes`;
      break;
    
    case 'no_results':
      systemPrompt = 'Eres un asistente emp√°tico de ProveIA que ayuda cuando no hay resultados.';
      prompt = `Contexto: ${context}\n\nNo se encontraron resultados. Genera un mensaje breve (m√°ximo 40 palabras) que:\n- Sea emp√°tico\n- Sugiera ampliar el radio o intentar otra categor√≠a\n- Mantenga un tono positivo\n- Use 1 emoji relevante`;
      break;
    
    case 'error':
      systemPrompt = 'Eres un asistente emp√°tico de ProveIA que maneja errores con profesionalismo.';
      prompt = `Error t√©cnico: ${context}\n\nGenera un mensaje de error amigable (m√°ximo 30 palabras) que:\n- Sea emp√°tico\n- Pida al usuario intentar de nuevo\n- No mencione detalles t√©cnicos\n- Use 1 emoji apropiado`;
      break;
  }

  try {
    const response = await fetch('https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-exp:generateContent?key=' + apiKey, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        contents: [{
          parts: [{
            text: `${systemPrompt}\n\n${prompt}`
          }]
        }],
        generationConfig: {
          temperature: 0.7,
          maxOutputTokens: 200,
        }
      })
    });

    if (!response.ok) {
      console.error('Gemini API error:', response.status);
      throw new Error('Error en Gemini API');
    }

    const data = await response.json();
    const generatedText = data.candidates?.[0]?.content?.parts?.[0]?.text || '';
    
    return generatedText.trim() || getFallbackMessage(type);
  } catch (error) {
    console.error('Error llamando a Gemini:', error);
    return getFallbackMessage(type);
  }
}

function getFallbackMessage(type: string): string {
  switch (type) {
    case 'info':
      return 'üìç Tengo informaci√≥n de proveedores en todo M√©xico. ¬øEn qu√© ciudad espec√≠fica necesitas buscar?';
    case 'ask_location':
      return 'üìç ¬øEn qu√© ubicaci√≥n quieres buscar proveedores?';
    case 'ask_radius':
      return 'üìè ¬øA qu√© distancia quieres buscar?';
    case 'results':
      return '‚úÖ Aqu√≠ est√°n los resultados encontrados, ordenados por relevancia.';
    case 'no_results':
      return 'üòî No encontr√© resultados. Intenta ampliar el radio de b√∫squeda.';
    case 'error':
      return '‚ùå Ocurri√≥ un error. Por favor intenta de nuevo.';
    default:
      return 'Procesando tu solicitud...';
  }
}

// Funciones auxiliares
function isLocationInfoQuestion(text: string): boolean {
  const lower = text.toLowerCase().normalize('NFD').replace(/[\u0300-\u036f]/g, '');
  
  console.log('Verificando si es pregunta informativa...');
  
  // Palabras clave que indican pregunta sobre cobertura (NO sobre b√∫squeda)
  const locationWords = lower.includes('ubicaciones') || lower.includes('ciudades') || 
                        lower.includes('lugares') || lower.includes('estados') ||
                        lower.includes('municipios') || lower.includes('zonas') ||
                        lower.includes('regiones') || lower.includes('areas');
  
  const infoWords = lower.includes('tienes') || lower.includes('tiene') || 
                    lower.includes('hay') || lower.includes('cubres') || 
                    lower.includes('manejas') || lower.includes('disponibles') ||
                    lower.includes('que ubicaciones') || lower.includes('cuales ubicaciones') ||
                    lower.includes('donde tienes') || lower.includes('saber') || 
                    lower.includes('conocer') || lower.includes('ver si') || 
                    lower.includes('lista') || lower.includes('informacion') ||
                    lower.includes('cobertura') || lower.includes('cuantos') ||
                    lower.includes('cuantas');
  
  const hasInfoKeywords = locationWords && infoWords;
  
  // NO es pregunta informativa si menciona buscar algo espec√≠fico
  const isSearchQuery = 
    /(?:busca|buscar|encuentra|encontrar|dame|necesito|quiero)\s+(?:proveedores?\s+(?:de|en)\s+\w+|gasolineras|ferreterias|farmacias|hoteles|restaurantes|papelerias)/i.test(lower);
  
  console.log('  - Has location words:', locationWords);
  console.log('  - Has info words:', infoWords);
  console.log('  - Has info keywords:', hasInfoKeywords);
  console.log('  - Is search query:', isSearchQuery);
  
  return hasInfoKeywords && !isSearchQuery;
}

function extractSearchTerms(text: string) {
  const lower = text.toLowerCase().normalize('NFD').replace(/[\u0300-\u036f]/g, '');
  
  // Gasolineras
  if (/gasolin/.test(lower)) {
    return {
      terms: ['gasolinera', '468411'],
      display: 'gasolineras',
      geoCategories: 'service.fuel,transport.fuel'
    };
  }
  
  // Ferreter√≠as y tlapaler√≠as
  if (/ferreter|tlapaler/.test(lower)) {
    return {
      terms: ['ferreter√≠a', '467111', 'tlapaler√≠a'],
      display: 'ferreter√≠as',
      geoCategories: 'commercial.hardware,commercial.tools'
    };
  }
  
  // Papeler√≠as
  if (/papeler/.test(lower)) {
    return {
      terms: ['papeler√≠a', '465910'],
      display: 'papeler√≠as',
      geoCategories: 'commercial.stationery,commercial.books'
    };
  }
  
  // Farmacias
  if (/farmaci/.test(lower)) {
    return {
      terms: ['farmacia', '464111'],
      display: 'farmacias',
      geoCategories: 'healthcare.pharmacy'
    };
  }
  
  // Metal / Acero / Herrer√≠a
  if (/metal|acero|herrer/.test(lower)) {
    return {
      terms: ['metal', '331', 'acero', 'herrer√≠a'],
      display: 'proveedores de metal',
      geoCategories: 'commercial.metal,commercial.wholesale'
    };
  }
  
  // Restaurantes
  if (/restauran|comida|comer/.test(lower)) {
    return {
      terms: ['restaurante', '722'],
      display: 'restaurantes',
      geoCategories: 'catering.restaurant'
    };
  }
  
  // Supermercados
  if (/supermerc|abarrot/.test(lower)) {
    return {
      terms: ['supermercado', '462111', 'abarrotes'],
      display: 'supermercados',
      geoCategories: 'commercial.supermarket,commercial.food'
    };
  }
  
  // Log√≠stica - m√°s espec√≠fico para evitar resultados irrelevantes
  if (/logisti/.test(lower)) {
    return {
      terms: ['log√≠stica', 'transporte de carga', 'almacenamiento'],
      display: 'empresas de log√≠stica',
      geoCategories: 'service.logistics,transport.truck'
    };
  }
  
  // Paqueter√≠a/Mensajer√≠a (separado de log√≠stica)
  if (/paquet|mensaj|courier/.test(lower)) {
    return {
      terms: ['paqueter√≠a', 'mensajer√≠a', '492110'],
      display: 'empresas de paqueter√≠a',
      geoCategories: 'service.delivery,service.postal'
    };
  }
  
  // Refacciones
  if (/refacci|autoparte|repuesto/.test(lower)) {
    return {
      terms: ['refacciones', '468420', 'autopartes'],
      display: 'refaccionarias',
      geoCategories: 'transport.car_repair,commercial.wholesale'
    };
  }
  
  // Bancos
  if (/banco/.test(lower)) {
    return {
      terms: ['banco', '522'],
      display: 'bancos',
      geoCategories: 'service.financial,service.bank'
    };
  }
  
  // Hoteles
  if (/hotel|hospeda/.test(lower)) {
    return {
      terms: ['hotel', '721'],
      display: 'hoteles',
      geoCategories: 'accommodation.hotel'
    };
  }
  
  // Construcci√≥n / Materiales
  if (/construc|material|cemento|arena/.test(lower)) {
    return {
      terms: ['construcci√≥n', '467114', 'materiales'],
      display: 'materiales de construcci√≥n',
      geoCategories: 'commercial.building_materials'
    };
  }
  
  // Pl√°stico
  if (/plastic/.test(lower)) {
    return {
      terms: ['pl√°stico', '326', 'plasticos'],
      display: 'proveedores de pl√°stico',
      geoCategories: 'commercial.wholesale'
    };
  }
  
  // Textil / Tela - m√°s espec√≠fico
  if (/textil|tela|tejido|fabric/.test(lower)) {
    return {
      terms: ['telas', 'textiles', 'fabrica de textiles', '314'],
      display: 'proveedores textiles',
      geoCategories: 'commercial.textiles,commercial.fabric'
    };
  }
  
  // Fallback: extraer palabras clave (evitar texto completo)
  const keywords = lower
    .replace(/busca|buscar|encuentra|quiero|necesito|dame|en|de|la|el|los|las|cerca|proveedores?/g, '')
    .trim()
    .split(/\s+/)
    .filter(word => word.length > 3)
    .slice(0, 2); // Solo las primeras 2 palabras relevantes
  
  const searchTerm = keywords.length > 0 ? keywords.join(' ') : 'comercio';
  
  return {
    terms: [searchTerm],
    display: 'proveedores',
    geoCategories: ''
  };
}

function extractLimit(text: string): number | null {
  const limitMatch = text.match(/(?:los\s+)?(\d+)\s+mejores|top\s+(\d+)|primeros?\s+(\d+)/i);
  if (limitMatch) {
    const num = parseInt(limitMatch[1] || limitMatch[2] || limitMatch[3]);
    return num > 0 && num <= 50 ? num : null;
  }
  return null;
}

function containsLocation(text: string): boolean {
  // Patrones para detectar menciones de ubicaci√≥n
  const locationPatterns = [
    /\ben\s+([a-z√°√©√≠√≥√∫√±]+(?:\s+[a-z√°√©√≠√≥√∫√±]+)?)/i,  // "en Monterrey", "en Ciudad de M√©xico"
    /\bde\s+([a-z√°√©√≠√≥√∫√±]+(?:\s+[a-z√°√©√≠√≥√∫√±]+)?)/i,  // "de Guadalajara"
    /\bcerca\s+de\s+([a-z√°√©√≠√≥√∫√±]+(?:\s+[a-z√°√©√≠√≥√∫√±]+)?)/i,  // "cerca de Le√≥n"
  ];
  
  return locationPatterns.some(pattern => pattern.test(text));
}

function containsRadius(text: string): boolean {
  return /\d+\s*(km|kil√≥metros|metros|m\b)/i.test(text);
}

function extractLocation(text: string): string | null {
  const lower = text.toLowerCase();
  
  // Lista expandida de ciudades principales de M√©xico
  const cityKeywords = [
    'monterrey', 'guadalajara', 'ciudad de m√©xico', 'cdmx', 'puebla', 'tijuana',
    'le√≥n', 'zapopan', 'm√©rida', 'san luis potos√≠', 'quer√©taro', 'toluca',
    'canc√∫n', 'chihuahua', 'saltillo', 'aguascalientes', 'morelia', 'hermosillo',
    'culiac√°n', 'veracruz', 'mexicali', 'acapulco', 'cuernavaca', 'oaxaca',
    'san pedro', 'guadalupe', 'santa catarina', 'escobedo', 'apodaca',
    'nuevo le√≥n', 'jalisco', 'guanajuato', 'yucat√°n', 'quintana roo'
  ];
  
  // Buscar ciudades conocidas
  for (const city of cityKeywords) {
    if (lower.includes(city)) {
      return city;
    }
  }
  
  // Intentar extraer ubicaci√≥n usando patrones
  const locationPatterns = [
    /\ben\s+([a-z√°√©√≠√≥√∫√±]+(?:\s+[a-z√°√©√≠√≥√∫√±]+)?)/i,
    /\bde\s+([a-z√°√©√≠√≥√∫√±]+(?:\s+[a-z√°√©√≠√≥√∫√±]+)?)/i,
    /\bcerca\s+de\s+([a-z√°√©√≠√≥√∫√±]+(?:\s+[a-z√°√©√≠√≥√∫√±]+)?)/i,
  ];
  
  for (const pattern of locationPatterns) {
    const match = text.match(pattern);
    if (match && match[1]) {
      // Filtrar palabras comunes que no son ubicaciones
      const extracted = match[1].toLowerCase();
      const stopWords = ['la', 'el', 'los', 'las', 'un', 'una', 'mi', 'tu', 'su'];
      if (!stopWords.includes(extracted)) {
        return match[1];
      }
    }
  }
  
  return null;
}

async function geocode(locationText: string, apiKey: string) {
  const url = new URL('https://api.geoapify.com/v1/geocode/search');
  url.searchParams.set('text', `${locationText}, M√©xico`); // Forzar b√∫squeda en M√©xico
  url.searchParams.set('filter', 'countrycode:mx'); // Filtrar solo resultados de M√©xico
  url.searchParams.set('apiKey', apiKey);
  
  console.log(`Geocodificando: ${locationText} (filtrado a M√©xico)`);
  
  const response = await fetch(url.toString());
  if (!response.ok) {
    console.error('Error en geocodificaci√≥n:', response.status);
    throw new Error('Error en geocodificaci√≥n');
  }
  
  const data = await response.json();
  console.log(`Geoapify devolvi√≥ ${data.features?.length || 0} resultados`);
  
  const feature = data.features?.[0];
  if (!feature) {
    console.error('No se encontr√≥ la ubicaci√≥n en M√©xico');
    throw new Error('Ubicaci√≥n no encontrada en M√©xico. Por favor especifica una ciudad mexicana.');
  }
  
  const [lon, lat] = feature.geometry.coordinates;
  console.log(`Coordenadas obtenidas: lat=${lat}, lon=${lon}`);
  
  return {
    latitude: lat,
    longitude: lon,
    name: feature.properties.formatted
  };
}

async function searchDENUE(
  terms: string[],
  lat: number,
  lon: number,
  radius: number,
  token: string
): Promise<Provider[]> {
  const results: Provider[] = [];
  
  // Validar coordenadas de M√©xico antes de buscar
  if (lat < 14 || lat > 33 || lon < -118 || lon > -86) {
    console.error(`Coordenadas fuera de M√©xico: lat=${lat}, lon=${lon}`);
    throw new Error('Las coordenadas est√°n fuera de M√©xico. Por favor verifica la ubicaci√≥n.');
  }
  
  for (const term of terms) {
    try {
      const url = `https://www.inegi.org.mx/app/api/denue/v1/consulta/Buscar/${encodeURIComponent(term)}/${lat},${lon}/${radius}/${token}`;
      console.log(`Buscando en DENUE: ${term} en (${lat}, ${lon}) con radio ${radius}m`);
      
      // A√±adir timeout y mejor manejo de errores
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 15000); // 15 segundos timeout
      
      const response = await fetch(url, {
        signal: controller.signal,
        headers: {
          'User-Agent': 'Mozilla/5.0',
          'Accept': 'application/json'
        }
      });
      
      clearTimeout(timeoutId);
      
      if (!response.ok) {
        console.error(`DENUE HTTP error para ${term}: ${response.status} ${response.statusText}`);
        continue;
      }
      
      const text = await response.text();
      
      // Validar que la respuesta sea JSON v√°lido
      if (!text || text.trim().length === 0) {
        console.error(`DENUE devolvi√≥ respuesta vac√≠a para ${term}`);
        continue;
      }
      
      const parsed = parseDENUE(text);
      console.log(`‚úÖ DENUE encontr√≥ ${parsed.length} resultados para: ${term}`);
      results.push(...parsed);
      
      if (results.length > 0) break; // Si encontramos resultados, no seguir buscando
    } catch (error) {
      if (error instanceof Error) {
        if (error.name === 'AbortError' || error.name === 'TimeoutError') {
          console.error(`‚è±Ô∏è Timeout buscando ${term} en DENUE (15s excedido)`);
        } else {
          console.error(`‚ùå Error buscando t√©rmino ${term}:`, error.message);
        }
      } else {
        console.error(`‚ùå Error desconocido buscando ${term}:`, error);
      }
      // Continuar con el siguiente t√©rmino en lugar de fallar completamente
      continue;
    }
  }
  
  // Si no hay resultados con el radio especificado, intentar con 10km
  if (results.length === 0 && radius < 10000) {
    console.log(`No se encontraron resultados en ${radius}m, ampliando a 10km`);
    return searchDENUE(terms, lat, lon, 10000, token);
  }
  
  return deduplicateProviders(results);
}

function parseDENUE(text: string): Provider[] {
  try {
    const data = JSON.parse(text);
    if (Array.isArray(data)) {
      return data.map((item: any) => ({
        id: item.Id || item.id || String(Math.random()),
        name: item.Nombre || item.nom_estab || 'Sin nombre',
        category: item.Clase_actividad || item.nombre_act || 'Sin categor√≠a',
        description: item.Clase_actividad || item.clase_actividad || '',
        rating: 0,
        location_name: item.Ubicacion || item.localidad || '',
        latitude: parseFloat(item.Latitud || item.latitud || '0'),
        longitude: parseFloat(item.Longitud || item.longitud || '0'),
        contact_phone: item.Telefono || item.telefono || null,
        contact_email: item.Correo_e || item.correoelec || null,
        website: item.Sitio_internet || item.www || null,
        address: formatAddress(item),
        score: 0,
        distance: 0,
        cve_scian: item.Codigo_SCIAN || item.cve_scian || '',
        estrato: item.Estrato || item.per_ocu || ''
      }));
    }
  } catch (e) {
    console.error('Error parsing DENUE JSON:', e);
  }
  
  // Fallback: parse as pipe-delimited
  const lines = text.trim().split('\n').filter(Boolean);
  const providers: Provider[] = [];
  
  for (const line of lines) {
    const parts = line.split('|');
    if (parts.length < 19) continue;
    
    providers.push({
      id: parts[1] || String(Math.random()),
      name: parts[2] || 'Sin nombre',
      category: parts[4] || 'Sin categor√≠a',
      description: parts[4] || '',
      rating: 0,
      location_name: parts[12] || '',
      latitude: parseFloat(parts[18] || '0'),
      longitude: parseFloat(parts[17] || '0'),
      contact_phone: parts[13] || null,
      contact_email: parts[14] || null,
      website: parts[15] || null,
      address: `${parts[6] || ''} ${parts[7] || ''} ${parts[8] || ''}, ${parts[10] || ''} ${parts[11] || ''}`.trim(),
      score: 0,
      distance: 0,
      cve_scian: '',
      estrato: parts[5] || ''
    });
  }
  
  return providers;
}

function formatAddress(item: any): string {
  const parts = [
    item.Tipo_vialidad || item.tipo_vialidad,
    item.Calle || item.nom_vial,
    item.Num_Exterior || item.numero_ext,
    item.Colonia || item.nomb_asent,
    item.CP ? `CP ${item.CP}` : ''
  ].filter(Boolean);
  
  return parts.join(' ');
}

function deduplicateProviders(providers: Provider[]): Provider[] {
  const seen = new Set<string>();
  const unique: Provider[] = [];
  
  for (const provider of providers) {
    const key = `${provider.name}|${provider.latitude}|${provider.longitude}`;
    if (!seen.has(key)) {
      seen.add(key);
      unique.push(provider);
    }
  }
  
  return unique;
}

async function enrichProviders(
  providers: Provider[],
  apiKey: string,
  categories: string
): Promise<Provider[]> {
  if (!categories) return providers;
  
  const enriched: Provider[] = [];
  
  for (const provider of providers) {
    try {
      const placeData = await geoapifyPlaceNear(
        provider.longitude,
        provider.latitude,
        apiKey,
        categories
      );
      
      if (placeData) {
        provider.website = provider.website || placeData.website || null;
        provider.contact_phone = provider.contact_phone || placeData.phone || null;
      }
    } catch (error) {
      console.error('Error enriqueciendo proveedor:', error);
    }
    
    enriched.push(provider);
  }
  
  return enriched;
}

async function geoapifyPlaceNear(
  lon: number,
  lat: number,
  apiKey: string,
  categories: string
) {
  const url = new URL('https://api.geoapify.com/v2/places');
  url.searchParams.set('categories', categories);
  url.searchParams.set('filter', `circle:${lon},${lat},250`);
  url.searchParams.set('limit', '1');
  url.searchParams.set('apiKey', apiKey);
  
  const response = await fetch(url.toString());
  if (!response.ok) return null;
  
  const data = await response.json();
  const feature = data.features?.[0];
  if (!feature) return null;
  
  const props = feature.properties || {};
  return {
    website: props.website || props.datasource?.raw?.website || '',
    phone: props.datasource?.raw?.phone || ''
  };
}

function calculateScore(
  provider: Provider,
  location: { latitude: number; longitude: number },
  searchTerms: string[],
  enriched: boolean
): number {
  let score = 0;
  
  // Proximidad (50 puntos max)
  const distance = calculateDistance(
    location.latitude,
    location.longitude,
    provider.latitude,
    provider.longitude
  );
  const proximityScore = Math.max(0, 50 * (1 - Math.min(distance, 5) / 5));
  score += proximityScore;
  
  // Datos de contacto
  if (provider.contact_phone) score += 10;
  if (provider.website) score += 10;
  if (provider.contact_email) score += 5;
  
  // Match de categor√≠a/descripci√≥n
  const desc = (provider.description || '').toLowerCase();
  const cve = (provider.cve_scian || '').toString();
  const hasMatch = searchTerms.some(term => 
    desc.includes(term.toLowerCase()) || cve.includes(term)
  );
  if (hasMatch) score += 15;
  
  // Bonus por enriquecimiento
  if (enriched && (provider.website || provider.contact_phone)) {
    score += 10;
  }
  
  return Math.round(score);
}

function calculateDistance(lat1: number, lon1: number, lat2: number, lon2: number): number {
  const R = 6371; // Radio de la Tierra en km
  const dLat = (lat2 - lat1) * Math.PI / 180;
  const dLon = (lon2 - lon1) * Math.PI / 180;
  const a = 
    Math.sin(dLat / 2) * Math.sin(dLat / 2) +
    Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *
    Math.sin(dLon / 2) * Math.sin(dLon / 2);
  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
  return R * c;
}
